[project]
    authors = [{ name = "Nate Landau", email = "github@natelandau.com" }]
    dependencies = [
        "aiofiles>=24.1.0",
        "aiohttp>=3.12.14",
        "arrow>=1.3.0",
        "audioop-lts>=0.2.1",
        "beanie>=1.30.0",
        "boto3>=1.39.4",
        "botocore>=1.39.4",
        "certifi>=2025.7.9",
        "confz>=2.1.0",
        "faker>=37.4.0",
        "flask-discord>=0.1.69",
        "flask>=3.1.1",
        "hypercorn>=0.17.3",
        "inflect>=7.5.0",
        "jinjax[whitenoise]>=0.60",
        "loguru>=0.7.3",
        "markdown2>=2.5.3",
        "markupsafe>=3.0.2",
        "motor>=3.7.1",
        "numpy>=2.3.1",
        "py-cord>=2.6.1",
        "pydantic>=2.11.7",
        "pygithub>=2.6.1",
        "pymongo>=4.13.2",
        "quart-flask-patch>=0.3.0",
        "quart-session>=3.0.0",
        "quart-wtforms>=1.0.3",
        "quart>=0.20.0",
        "redis>=6.2.0",
        "rich>=14.0.0",
        "semver>=3.0.4",
        "typer>=0.16.0",
        "werkzeug>=3.1.3",
        "wtforms>=3.2.1",
    ]
    description = "Valentina is a Discord bot that helps you run TTRPGs."
    license = "AGPL-3.0-or-later"
    license-files = ["LICENSE"]
    name = "valentina"
    readme = "README.md"
    requires-python = ">=3.13"
    version = "3.4.0"
    [project.urls]
        homepage   = "https://github.com/natelandau/valentina"
        repository = "https://github.com/natelandau/valentina"

    [project.scripts]
        valentina = "valentina.run:cli"

[dependency-groups]
    dev = [
        "commitizen>=4.8.3",
        "coverage>=7.9.2",
        "deptry>=0.23.0",
        "dirty-equals>=0.9.0",
        "djlint>=1.36.4",
        "docker>=7.1.0",
        "duty>=1.6.0",
        "mypy>=1.16.1",
        "polyfactory>=2.22.0",
        "pre-commit>=4.2.0",
        "pytest-asyncio>=1.0.0",
        "pytest-clarity>=1.0.1",
        "pytest-cov>=6.2.1",
        "pytest-env>=1.1.5",
        "pytest-mock>=3.14.1",
        "pytest-sugar>=1.0.0",
        "pytest-xdist>=3.8.0",
        "pytest>=8.4.1",
        "ruff>=0.12.3",
        "shellcheck-py>=0.10.0.1",
        "types-aiofiles>=24.1.0.20250708",
        "typos>=1.34.0",
        "yamllint>=1.37.1",
    ]

[build-system]
    build-backend = "hatchling.build"
    requires      = ["hatchling"]

[tool.commitizen]
    bump_message               = "bump(release): v$current_version â†’ v$new_version"
    changelog_merge_prerelease = true
    tag_format                 = "v$version"
    update_changelog_on_bump   = true
    version                    = "3.0.4"
    version_files              = ["src/valentina/__version__.py:__version__"]
    version_provider           = "uv"

[tool.coverage.report] # https://coverage.readthedocs.io/en/latest/config.html#report
    exclude_lines = [
        'def __repr__',
        'except [\w\s\._]+ as .*:',
        'log\.critical',
        'log\.debug',
        'log\.error',
        'log\.exception',
        'log\.info',
        'log\.success',
        'log\.trace',
        'log\.warning',
        'pragma: no cover',
        'raise Abort',
        'raise Exit',
        'raise typer\.Exit',
    ]
    fail_under = 50
    precision = 1
    show_missing = true
    skip_covered = true
    skip_empty = true

[tool.coverage.run]
    branch = true
    command_line = "--module pytest"
    data_file = ".cache/coverage"
    omit = [
        "src/valentina/__version__.py",
        "src/valentina/bot.py",
        "src/valentina/discord/bot.py",
        "src/valentina/discord/cogs/*",
        "src/valentina/discord/views/*",
        "src/valentina/models/errors.py",
        "src/valentina/run.py",
        "src/valentina/utils/errors.py",
        "src/valentina/utils/logging.py",
        "tests/*",
    ]
    source = ["src"]

[tool.coverage.xml]
    output = ".cache/coverage.xml"

[tool.deptry]
    known_first_party = ["valentina"]
    [tool.deptry.per_rule_ignores]
        DEP002 = ["audioop-lts", "redis"]
        DEP004 = ["duty"]

[tool.djlint]
    extend_exclude = ".vscode, .github, .git, .ruff_cache, .pytest_cache, __pycache__, .mypy_cache, .venv, tests, src/valentina/discord, src/valentina/models, src/valentina/utils, src/valentina/views, tests"
    ignore         = "H030,H031,H021,H006,H013"
    # ignore_case    = true
    # format_attribute_template_tags = true
    blank_line_after_tag  = "load,extends,include,set"
    blank_line_before_tag = "load,extends,include,set"
    custom_html           = "PageLayout"
    indent                = 4
    max_blank_lines       = 1
    max_line_length       = 100
    use_gitignore         = true

[tool.mypy] # https://mypy.readthedocs.io/en/latest/config_file.html
    cache_dir                   = ".cache/mypy"
    disallow_any_unimported     = false
    disallow_subclassing_any    = false
    disallow_untyped_decorators = false
    disallow_untyped_defs       = true
    exclude                     = ['discord/cogs/test_cog.py', 'duties.py', 'tests/']
    follow_imports              = "normal"
    ignore_missing_imports      = true
    junit_xml                   = ".cache/mypy.xml"
    no_implicit_optional        = true
    pretty                      = false
    show_column_numbers         = true
    show_error_codes            = true
    show_error_context          = true
    strict_optional             = false
    warn_redundant_casts        = true
    warn_unreachable            = true
    warn_unused_ignores         = true

[tool.pytest.ini_options]

    addopts = "--color=yes --doctest-modules --exitfirst --failed-first --strict-config --strict-markers --ignore=src/valentina/discord/cogs/test_cog.py"
    asyncio_default_fixture_loop_scope = "function"
    asyncio_mode = "auto"
    cache_dir = ".cache/pytest"
    env = [
        "VALENTINA_AWS_ACCESS_KEY_ID=access_key",
        "VALENTINA_AWS_SECRET_ACCESS_KEY=secred_access_key",
        "VALENTINA_S3_BUCKET_NAME=bucket",
        "VALENTINA_TEST_CONFIG_KEY=testing",
        "WTF_CSRF_ENABLED=false",
    ]
    filterwarnings = ["error", "ignore::DeprecationWarning"]
    markers = [
        "drop_db: drops the database before the test creating fresh data",
        "no_db: marks tests as not needing a database",
        "serial",
    ]
    testpaths = ["tests"]
    xfail_strict = true

[tool.ruff] # https://github.com/charliermarsh/ruff

    exclude        = [".cache", ".git", ".venv", "_build", "build", "dist", "tmp"]
    fix            = true
    line-length    = 100
    output-format  = "grouped"
    src            = ["src", "tests"]
    target-version = "py313"
    [tool.ruff.lint]
        ignore = [
            "ANN002", # Missing type annotation for `*args`
            "ANN003", # Missing type annotation for `**kwargs`
            "ANN204", # missing return type annotation for special method `__init__`
            "ANN401", # Dynamically typed expressions (typing.Any) are disallowed,
            "B006",   # mutable-argument-default
            "B008",   # function-call-in-default-argument
            "COM812", # Trailing comma missing"
            "CPY001", # Missing copyright notice at top of file
            "D107",   # undocumented-public-init
            "E501",   # line-too-long
            "FBT001", # Boolean-typed positional argument in function definition
            "FBT002", # Boolean-typed positional argument in function definition
            "FIX002", # Line contains TODO, consider resolving the issue
            "S311",   # suspicious-non-cryptographic-random-usage
            "TD001",  # invalid-todo-tag
            "TD002",  # Missing author in TODO
            "TD002",  # Missing author in TODO
            "TD003",  # Missing issue link on the line following this TODO
            "TD003",  # Missing issue link on the line following this TODO
        ]
        per-file-ignores = { "scripts/*.py" = [
            "PLR0912",
            "PLR0913",
        ], "migrations/*.py" = [
            "ARG002",
            "PLR6301",
        ], "tests/**/*.py" = [
            "A002",
            "A003",
            "ANN001",  # Missing type annotation for function argument `cls`
            "ANN002",  # Missing type annotation for `*args`
            "ANN003",  # Missing type annotation for `**kwargs`
            "ANN201",  # Missing return type annotation
            "ARG001",  # Unused argument
            "ARG005",  # Unused lambda argument
            "D102",
            "ERA001",  # Commented out code
            "F403",
            "F405",    # May be undefined from type imports
            "PGH003",  # Use specific rule codes when ignoring type issues
            "PLR0913",
            "PLR2004",
            "S101",
            "SLF001",  # Calling private method
        ], "tests/database/*.py" = [
            "A002",
            "A003",
            "PLR0913",
            "PLR2004",
            "S101",
        ], "src/valentina/discord/cogs/*.py" = [
            "PLR0904",
            "PLR6301",
        ], "src/valentina/utils/converters.py" = [
            "PLR6301",
        ] }
        select = ["ALL"]
        unfixable = [
            "ERA001", # Commented out code
            "F401",   # unused-import
            "F841",   # unused-variable
        ]

        [tool.ruff.lint.mccabe]
            # Unlike Flake8, default to a complexity level of 10.
            max-complexity = 10

        [tool.ruff.lint.pydocstyle]
            convention = "google"

        [tool.ruff.lint.pylint]
            max-args = 6

    [tool.ruff.format]
        indent-style              = "space"
        line-ending               = "auto"
        quote-style               = "double"
        skip-magic-trailing-comma = false
